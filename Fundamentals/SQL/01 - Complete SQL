// database : collection of data in format that can easily accessed

// DBMS : A software appln used to manage our DB

// user -> DBMS -> DB 

// Types of DB :
-> Relational : data stored in tables (MYSQL)
-> Non-relational : not stored in tables  (MONGODB)

// SQL : Used to interact with relational DB's 

// Create DB : create database db_name;

// delete DB : drop database db_name;  

// Enter into db : use db_name;

// Create table : 
-> use db_name;
-> create table table_name( id INT PRIMARY KE , name VARCHAR(50) , age INT NOT NULL);

// Insert values :
INSERT INTO table_name( 1,"Dip",22);

// char vs varchar
-> both stores upto 256 char but char kept all size reserved where as varchar only kept until the content size

//  Types of SQL commands
-> DDL : data definition language : create alter rename drop truncate
-> DQL : data query language : select
-> DML : data manipulation language : insert , update , delete
-> DCL : data control language : grant revoke
-> TCL : transaction control language : start transaction commit rollback

// Table related queries : 
-> create 
-> insert : insert into table_name (col1 , col2) values (20,10);
-> select & view all column : select * from table_name;

// Keys :
-> Primary key : uniquely identifies each row + never null
-> Foreign key : Present in column 1 + its an primary key of other clm + values can repeat or null 

// Table 1 : student                                  Table2 : city
id name cityid city                                   id city_name
cityid = FK                                           id = pk 

// Constraints :
-> Not null
-> unique
-> primary key
-> check : can limit the values allowed in a column 
-> distinct : gives unique 

// Clauses : 
-> where : to define some condition
-> Operator which works with where clause : + - * / > < >= <= AND OR NOT IN BETWEEN ALL LIKE ANY & | 
-> limit : sets an upper limit on number of rows to be returned  ( select * from students limit 3);
-> order by : asc or desc order ( select * from students order by city asc );

// Aggregate function :
-> max() : select max(marks) from student;
-> avg() : select avg(marks) from student;
-> count()

// Group By Clause : Groups rows that have same values into summary rows
// Count no of students in each city : select city, count(name) from student group by city;

// Having clause : When we want to apply any condition after grouping
// select count(name) , city from student group by city having max(marks) > 90;

// General order for clauses :
SELECT column(s)
FROM table_name
WHERE condition
GROUP BY column(s)
HAVING condition
ORDER BY column(s) ASC;

// Where applies condition on rows + written before group by
// Having applies condition on groups + written after group by 

// Update : for updating existing row
-> UPDATE student set grade = "O"  where grade = "A" ;

// Delete : for deleting existing row
-> DELETE from student where marks < 33;

// Foreign Key

-- Create Departments table
CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(100)
);

-- Create Employees table with a foreign key
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    EmployeeName VARCHAR(100),
    DepartmentID INT,
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);

// Cascading for foreign key
-> Good for future purpose , if some modification done in parent table's pk , it reflects in child's fk
-> We dont need to go in the table where we kept fk , to do the chnages , it should happen manually 
-> ON DELETE CASCADE / ON UPDATE CASCADE

// alter : to change the schema 
-> add column : ALTER TABLE table_name ADD COLUMN col_name datatype constraint;
-> rename column
-> drop column
-> change
-> modify 

// truncate : It delete's table's data
-> TRUNCATE TABLE table_name;
-> drop : delete table
-> truncate : data delete

// Joins : used to combine rows from 2 or more tables , based on related/common column between them
         : foreign key is not necessary

-> inner join : retrives the common between them 
-> outer join : left join = A + common between both
              : right join = B + common between both
              : full join = A + B complete

-> Example : 


Employees Table:
EmployeeID	EmployeeName	DepartmentID
1	            John	            1
2	            Jane	            2
3	            Jim	              3
4	            Jake	            NULL


Departments Table:
DepartmentID	DepartmentName
1                  	HR
2                  	IT
3	                Sales
4               Marketing

inner join :  SELECT *
              FROM Employees
              INNER JOIN Departments 
              ON Employees.DepartmentID = Departments.DepartmentID

left join :   SELECT *
              FROM Employees
              LEFT JOIN Departments 
              ON Employees.DepartmentID = Departments.DepartmentID

right join :  SELECT *
              FROM Employees
              RIGHT JOIN Departments 
              ON Employees.DepartmentID = Departments.DepartmentID;

full join :   SELECT *
              FROM Employees
              LEFT JOIN Departments 
              ON Employees.DepartmentID = Departments.DepartmentID
         UNION
              SELECT *
              FROM Employees
              RIGHT JOIN Departments 
              ON Employees.DepartmentID = Departments.DepartmentID


// Alias : kind of dummy name , we use it when table names are quite big 

inner join :  SELECT *
              FROM Employees as e
              INNER JOIN Departments as d
              ON e.DepartmentID = d.DepartmentID

// Union : used to combine the result set of two or more select statements , it gives unique records ( A & B ) not gives duplicates 


