-- Critical Section : Segment of code whose processes/threads access shared resources such as common variables and files.

// Major Thread scheduling issue
-- Race condition : When two or more threads can access shared data and they try to change it at same time as in thread sync they can easily swap

-- Solution : 

-> Mutual Exclusion using locks : Allows one thread/process at a time , apply lock when access & remove lock when its terminated
   But the issue with this is infinite waiting it first got eliminated

-> Conditional Variable : It actually lets the thread to stop until certain condition occurs, lock acquire then waiting state , once they enter waiting state
   lock will release and waits for signal , helps to eliminate the infinite wait ( contension )

-> Semaphore : 
( Binary Semahore )
-- Actually helps to solve critical section problem
-- Consist of two things : wait(s) & signal(s)
-- wait actually decrease s value by 1 , while signal inc by 1 and help us to access critical section only one at a time
-- we are able to achieve exclusion but order hum decide nahi krenge

         wait(s)
         {
               while(s<=0);
               s-=1;
         }
         
         
         signal(s)
         {
               s+=1;
         }

         do
         {
              wait();
               // critial section
              signal();
               // rest section
         }
